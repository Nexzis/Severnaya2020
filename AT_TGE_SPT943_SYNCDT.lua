--[[--------------------------------------------------------------------------------------------------------------
	@brief				- подготовка пакета для запроса записи параметров
	@return packet		- пакет готовый к передаче
--------------------------------------------------------------------------------------------------------------]]--
	function preparePacketReqRwParam( )

		-- таблица соответствия дней недели возвращаемых функцией os.date и принимаемых прибором
		local t1 = {[1]=6,	-- Вс [os.date]=СПТ943
					[2]=0,	-- Пн [os.date]=СПТ943
					[3]=1,	-- Вт [os.date]=СПТ943
					[4]=2,	-- Ср [os.date]=СПТ943
					[5]=3,	-- Чт [os.date]=СПТ943
					[6]=4,	-- Пт [os.date]=СПТ943
					[7]=5	-- Сб [os.date]=СПТ943
					};

		local dateTable = {};						-- временная таблица, для хранения даты и времени
		local temp;									-- временная переменная
		local packet = "";							-- строка запроса подготовленная к передаче

		local currentTime = (os.time());
		dateTable = os.date( "*t", currentTime);	-- заполнили временную таблицу значением даты

		temp = tostring( dateTable.year);			-- получили строку "2019"
		temp = string.sub ( temp, 3);				-- получили строку "19"
		temp = tonumber( temp);						-- получили число 19 

		local ss256 = dateTable.sec / 256;			-- записали тики таймера
		local ss = dateTable.sec;					-- записали секунды
		local mm = dateTable.min;					-- записали минуты
		local hh = dateTable.hour;					-- записали час

		local dd = dateTable.day;					-- записали число
		local mh = dateTable.month;					-- записали месяц
		local yy = temp;							-- записали год
		local dw = dateTable.wday					-- записали день недели

		for k, v in pairs( t1) do
			if k == dateTable.wday then
				dw = v;
			end
		end

		local tRWParam = {};	-- таблица с подготовленными параметрами запроса записи параметров

		tRWParam[1] = 0x10;		-- soh						управляющий код начала сообщения, всегда 0x10
		tRWParam[2] = 0xFF;		-- nt						сетевой номер абонента-адресата, 0xFF - безадресное обращение к абоненту
		tRWParam[3] = 0x90;		-- frm						код формата сообщения
		tRWParam[4] = 0x00;		-- id						индификатор сообщения
		tRWParam[5] = 0x00;		-- atr						зарезервировано (0x00)
		tRWParam[6] = 0x15;		-- lenL						длина тела сообщения, младший байт
		tRWParam[7] = 0x00;		-- lenH						длина тела сообщения, старший байт
		tRWParam[8] = 0x77;		-- func						код запроса записи параметров, всегда 0x77
		tRWParam[9] = 0x00;		-- pnumTag					тег PNUM TAG			??????????????????????????????????????????
		tRWParam[10] = 0x03;	-- dl_1						длина последующих элементов данных
		tRWParam[11] = 0x00;	-- ch						номер канала
		tRWParam[12] = 0x01;	-- pn						номер параметра (TIME)
		tRWParam[13] = 0x47;	-- tag						TIME
		tRWParam[14] = 0x04;	-- dl_2						длина последующих элементов данных
		tRWParam[15] = ss256;	-- ss/256		задаётся	тики таймера, кратные 1/256 доле секунды
		tRWParam[16] = ss;		-- ss			задаётся	секунды
		tRWParam[17] = mm;		-- mm			задаётся	минуты
		tRWParam[18] = hh;		-- hh			задаётся	часы
		tRWParam[19] = 0x00;	-- pnumTag					тег PNUM TAG			??????????????????????????????????????????
		tRWParam[20] = 0x03;	-- dl_3						длина последующих элементов данных
		tRWParam[21] = 0x00;	-- ch						номер канала
		tRWParam[22] = 0x01;	-- pn						номер параметра (DATE)
		tRWParam[23] = 0x47;	-- tag						DATE
		tRWParam[24] = 0x04;	-- dl_4						длина последующих элементов данных
		tRWParam[25] = dd;	 	-- dd						календарный день
		tRWParam[26] = mh;		-- mh						календарный месяц
		tRWParam[27] = yy;		-- yy						год относительно начала тысячелетия (год 2019 кодируется как yy=19)
		tRWParam[28] = dw;		-- dw						день недели (0-Пн, 1-Вт, 2-Ср, ..., 7-Вс)
		tRWParam[29] = 0x00;	-- crcL		вычисляется		CRC16, младший байт
		tRWParam[30] = 0x00;	-- crcH		вычисляется		CRC16, старший байт

		table.remove( tRWParam);			-- удалить последний элемент таблицы (crcH - старший байт CRC)
		table.remove( tRWParam);			-- удалить последний элемент таблицы (crcL - младший байт CRC)
		table.remove( tRWParam, 1);			-- удалить первый элементы таблицы (soh - управляющий код начала сообщения)

		local CRC = calcCRC( tRWParam);		-- вычислить CRC

		local crcL = CRC >> 8;				-- получить crcH - младший байт CRC
		local crcH = CRC & 0xFF;			-- получить crcL - старший байт CRC
		table.insert ( tRWParam, 1, 0x10);	-- вставить в таблицу soh - управляющий код начала сообщения
		table.insert ( tRWParam, crcL);		-- вставить	 в таблицу crcL - младший байт CRC
		table.insert ( tRWParam, crcH);		-- вставить	 в таблицу crcH - старший байт CRC

		-- формирование строки запроса для отправки в COM-порт:

		for i = 1, #tRWParam do
			packet = packet .. string.char( tRWParam[ i]);
		end
		return packet;
	end

--==========================================================
		tRWParam[1] = 0x10;		-- soh						управляющий код начала сообщения, всегда 0x10
		tRWParam[2] = 0xFF;		-- nt						сетевой номер абонента-адресата, 0xFF - безадресное обращение к абоненту
		tRWParam[3] = 0x44;		-- frm						код формата сообщения



		tRWParam[3] = 0x90;		-- frm						код формата сообщения
		tRWParam[4] = 0x00;		-- id						индификатор сообщения
		tRWParam[5] = 0x00;		-- atr						зарезервировано (0x00)
		tRWParam[6] = 0x15;		-- lenL						длина тела сообщения, младший байт
		tRWParam[7] = 0x00;		-- lenH						длина тела сообщения, старший байт
		tRWParam[8] = 0x77;		-- func						код запроса записи параметров, всегда 0x77
		tRWParam[9] = 0x00;		-- pnumTag					тег PNUM TAG			??????????????????????????????????????????
		tRWParam[10] = 0x03;	-- dl_1						длина последующих элементов данных
		tRWParam[11] = 0x00;	-- ch						номер канала
		tRWParam[12] = 0x01;	-- pn						номер параметра (TIME)
		tRWParam[13] = 0x47;	-- tag						TIME
		tRWParam[14] = 0x04;	-- dl_2						длина последующих элементов данных
		tRWParam[15] = ss256;	-- ss/256		задаётся	тики таймера, кратные 1/256 доле секунды
		tRWParam[16] = ss;		-- ss			задаётся	секунды
		tRWParam[17] = mm;		-- mm			задаётся	минуты
		tRWParam[18] = hh;		-- hh			задаётся	часы
		tRWParam[19] = 0x00;	-- pnumTag					тег PNUM TAG			??????????????????????????????????????????
		tRWParam[20] = 0x03;	-- dl_3						длина последующих элементов данных
		tRWParam[21] = 0x00;	-- ch						номер канала
		tRWParam[22] = 0x01;	-- pn						номер параметра (DATE)
		tRWParam[23] = 0x47;	-- tag						DATE
		tRWParam[24] = 0x04;	-- dl_4						длина последующих элементов данных
		tRWParam[25] = dd;	 	-- dd						календарный день
		tRWParam[26] = mh;		-- mh						календарный месяц
		tRWParam[27] = yy;		-- yy						год относительно начала тысячелетия (год 2019 кодируется как yy=19)
		tRWParam[28] = dw;		-- dw						день недели (0-Пн, 1-Вт, 2-Ср, ..., 7-Вс)
		tRWParam[29] = 0x00;	-- crcL		вычисляется		CRC16, младший байт
		tRWParam[30] = 0x00;	-- crcH		вычисляется		CRC16, старший байт
--==========================================================




--**********************************************************
--********************	  ENTRY	  **************************
--**********************************************************

	local ret;					-- возвращаемое значение функции
	local packet;				-- пакет
	local c = 1;				-- счётчик вызовов
	local tryConnection = 3;	-- количество подключений (запросов) к теплосчётчику

--[[----------------------------------------------------------------------------------
	открытие COM-порта
----------------------------------------------------------------------------------]]--
	Core.ArchiveRequestControl.SPT943DriverMessage = "Открытие " .. portName .. " на скорости " .. baudRate .. "...";
	Core.addLogMsg( "portOpen: открытие COM-порта (2400)...");
	ret = portOpen( portName, baudRate, dataBits, stopBits, parity);
	if  ret == -1 then 
	  goto quit;																	-- ошибка открытия порта ==>> ВЫХОД ИЗ ПРОГРАММЫ
	end
--[[----------------------------------------------------------------------------------
	инициализация сеанса связи ==> посылка FF,FF...FF
----------------------------------------------------------------------------------]]--
	Core.ArchiveRequestControl.SPT943DriverMessage = "Инициализация сеанса связи..."
	Core.addLogMsg( "initSession: инициализация сеанса связи...");
	initSession( initSessionStr);
	os.sleep( 1.5);		
--[[----------------------------------------------------------------------------------
	запрос сеанса связи (сокращённый формат сообщения) ==> посылка 10 FF 3F 00 00 00 00 C1 16
	@param	reqSessionShortStr	string	- запрос данных (строка)
	@return	packet	            table   - принятый пакет (массив)
----------------------------------------------------------------------------------]]--
::reqSessionShort::																-- МЕТКА ::reqSessionShort::

	Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (сокращённый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
	Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (сокращённый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
	ret = reqResp( reqSessionShortStr);
	if  ret == -1 then				  
		c = c + 1;  
		Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (сокращённый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
		Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (сокращённый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
			if c <= 3 then
				os.sleep( 1);
				goto reqSessionShort;												-- нет ответа от теплосчётчика ==>> ПОВТОР ЗАПРОСА 
				else 
				Core.ArchiveRequestControl.SPT943DriverMessage = "Лимит запросов сеанса связи исчерпан!";
				Core.addLogMsg( "reqResp: лимит запросов сеанса связи исчерпан!");	-->> ВЫХОД ИЗ ПРОГРАММЫ
				serialPort:clearBuffers( ); -- очистить приёмный и передающий буфер
				serialPort:close();			-- уничтожить объект
				goto quit;
			end
	end
	packet = ret;

-- ожидаемый ответ: 10 FF 3F 54 2B 0A 38 16

--[[----------------------------------------------------------------------------------
	проверка контрольной суммы
	@param	packet	table	- принятый пакет (массив)
	@return -1				- при несовпадении cs
	@return	packet	table   - при совпадении cs
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkCS: проверка контрольной суммы...");
	ret = checkCS( packet);
	if ret == -1 then												
	  goto reqSessionShort;															-- контрольные суммы не совпали ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
--[[----------------------------------------------------------------------------------
	проверка наличия кода ошибки (0x21) в ответном сообщении
	@param	packet	table	- принятый пакет
	@return -1				      - при наличии ошибки	
	@return packet	table	- при отсутствии ошибки
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkError: проверка наличия кода ошибки (0x21)...");
	ret = checkError( packet);
	if ret == -1 then										  
	  goto reqSessionShort;															-- в ответе присутствует код ошибки (0x21) ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
--[[----------------------------------------------------------------------------------
	обработка запроса сеанса связи (сокращённый формат сообщения)
	@param	packet	- принятый пакет
	@return 0
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "packetHandler: обработка запроса сеанса связи (сокращённый формат сообщения)...");
	packetHandler( packet, ch);
--[[----------------------------------------------------------------------------------
	ПЕРВЫЙ запрос сеанса связи (базовый формат сообщения) ==> посылка	10 FF 90 00 00 05 00 3F 00 00 00 00 D9 19
----------------------------------------------------------------------------------]]--
::reqSessionFull_1::																-- МЕТКА ::reqSessionFull_1::

	Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
	Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
	ret = reqResp( reqSessionFullStr);
	if ret == -1 then				 	  
		c = c + 1;
		Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
		Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
			if c <= 3 then										 
				os.sleep( 1);
				goto reqSessionFull_1;												-- нет ответа от теплосчётчика ==>> ПОВТОР ЗАПРОСА 
				else 
				Core.ArchiveRequestControl.SPT943DriverMessage = "Лимит запросов сеанса связи исчерпан!"
				Core.addLogMsg( "reqResp: лимит запросов сеанса связи исчерпан!");	-->> ВЫХОД ИЗ ПРОГРАММЫ
				serialPort:clearBuffers( ); -- очистить приёмный и передающий буфер
				serialPort:close();			-- уничтожить объект
				goto quit;
			end
	end
	packet = ret;

-- ожидаемый ответ: 10 FF 90 00 00 04 00 3F 54 2B 0A 86 B6
								
--[[----------------------------------------------------------------------------------
	проверка CRC
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkCRC: проверка CRC...");
	ret = checkCRC( packet);
	if ret == -1 then											  
	  goto reqSessionFull_1;															-- CRC не совпали ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
--[[----------------------------------------------------------------------------------
	проверка наличия кода ошибки (0x21) в ответном сообщении
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkError: проверка наличия кода ошибки (0x21)...");
	ret = checkError( packet);
	if ret == -1 then										  
	  goto reqSessionFull_1;															-- в ответе присутствует код ошибки (0x21) ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;										
--[[----------------------------------------------------------------------------------
	обработка запроса сеанса связи (базовый формат сообщения) 
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "packetHandler: обработка запроса сеанса связи (базовый формат сообщения)...");
	packetHandler( packet, ch);
-- ---- --[[----------------------------------------------------------------------------------
-- --	-- запрос изменения скорости обмена ==> посылка  10 FF 90 91 00 05 00 42 03 00 00 00 79 56
-- ---- ----------------------------------------------------------------------------------]]--
::reqChBaudRate::																-- МЕТКА ::reqChBaudRate::
	Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос изменения скорости обмена, попытка " .. c .. " из " .. tryConnection .. "...";
	Core.addLogMsg( "reqResp: ЗАПРОС изменения скорости обмена, попытка " .. c .. " из " .. tryConnection .. "...");
	ret = reqResp( reqBaudRateStr);
	if ret == -1 then
		Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос изменения скорости обмена, попытка " .. c .. " из " .. tryConnection .. "...";
		Core.addLogMsg( "reqResp: ЗАПРОС изменения скорости обмена, попытка " .. c .. " из " .. tryConnection .. "...");
			 c = c + 1;
			 if c <= 3 then															-- нет ответа от теплосчётчика ==>> ПОВТОР ЗАПРОСА 
				 os.sleep( 1);
				 goto reqChBaudRate; 
				 else 
				 Core.ArchiveRequestControl.SPT943DriverMessage = "Лимит запросов изменения скорости обмена исчерпан.";
				 Core.addLogMsg( "reqResp: лимит запросов изменения скорости обмена исчерпан.")	-->> ВЫХОД ИЗ ПРОГРАММЫ
				 goto quit;
			 end
	end
	packet = ret;
 -- -- ожидаемый ответ: 10 FF 90 91 00 01 00 42 B8 B8
				
-- --[[----------------------------------------------------------------------------------
	-- проверка CRC
-- ----------------------------------------------------------------------------------]]-- 
	--Core.addLogMsg( "checkCRC: проверка CRC...");
	ret = checkCRC( packet);
	if ret == -1 then											  
	  goto reqChBaudRate;																-- CRC не совпали ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
-- --[[----------------------------------------------------------------------------------
	-- проверка наличия кода ошибки (0x21) в ответном сообщении
-- ----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkError: проверка наличия кода ошибки (0x21)...");
	ret = checkError( packet);
	if ret == -1 then										  
	  goto reqChBaudRate;																-- в ответе присутствует код ошибки (0x21) ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
-- --[[----------------------------------------------------------------------------------
	-- обработка запроса изменения скорости обмена (базовый формат сообщения) 
-- ----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "packetHandler: обработка запроса изменения скорости обмена...");
	ret = packetHandler( packet, ch);
	if ret == -1 then																	-- ошибка открытия COM-порта -->> ВЫХОД ИЗ ПРОГРАММЫ
		goto quit;
	end
--[[----------------------------------------------------------------------------------
	ВТОРОЙ запрос сеанса связи (базовый формат сообщения) ==> посылка	10 FF 90 00 00 05 00 3F 00 00 00 00 D9 19
----------------------------------------------------------------------------------]]--
::reqSessionFull_2::																-- МЕТКА ::reqSessionFull_2::

	Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
	Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
	ret = reqResp( reqSessionFullStr);
	if ret == -1 then				 	  
		c = c + 1;
		Core.ArchiveRequestControl.SPT943DriverMessage = "Запрос сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...";
		Core.addLogMsg( "reqResp: ЗАПРОС сеанса связи (базовый формат сообщения), попытка " .. c .. " из " .. tryConnection .. "...");
			if c <= 3 then										 
				os.sleep( 1);
				goto reqSessionFull_2;												-- нет ответа от теплосчётчика ==>> ПОВТОР ЗАПРОСА 
				else 
				Core.ArchiveRequestControl.SPT943DriverMessage = "Лимит запросов сеанса связи исчерпан!";
				Core.addLogMsg( "reqResp: лимит запросов сеанса связи исчерпан!");	-->> ВЫХОД ИЗ ПРОГРАММЫ
				serialPort:clearBuffers( ); -- очистить приёмный и передающий буфер
				serialPort:close();			-- уничтожить объект
				goto quit;
			end
	end
	packet = ret;

-- ожидаемый ответ: 10 FF 90 00 00 04 00 3F 54 2B 0A 86 B6
								
--[[----------------------------------------------------------------------------------
	проверка CRC
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkCRC: проверка CRC...");
	ret = checkCRC( packet);
	if ret == -1 then											  
	  goto reqSessionFull_2;															-- CRC не совпали ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;
--[[----------------------------------------------------------------------------------
	проверка наличия кода ошибки (0x21) в ответном сообщении
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "checkError: проверка наличия кода ошибки (0x21)...");
	ret = checkError( packet);
	if ret == -1 then										  
	  goto reqSessionFull_2;															-- в ответе присутствует код ошибки (0x21) ==>> ПОВТОР ЗАПРОСА
	end
	packet = ret;										
--[[----------------------------------------------------------------------------------
	обработка запроса сеанса связи (базовый формат сообщения) 
----------------------------------------------------------------------------------]]--
	--Core.addLogMsg( "packetHandler: обработка запроса сеанса связи (базовый формат сообщения)...");
	packetHandler( packet, ch);
	ret = bu( userArchTypeHour, userArchTypeDate, userArchTypeMonth, userStartDate, userEndDate);
	if ret == -1 then
		goto quit;
	end
	
	serialPort:clearBuffers( ); -- очистить приёмный и передающий буфер
	serialPort:close();			-- уничтожить объект
::quit::																			  -- МЕТКА ВЫХОД ИЗ ПРОГРАММЫ
	Core.ArchiveRequestControl.SPT943DriverMessage = "ВЫХОД.";
	Core.addLogMsg( "ВЫХОД.");
	return q;
--**********************************************************
--********************	  EXIT	  **************************
--**********************************************************
